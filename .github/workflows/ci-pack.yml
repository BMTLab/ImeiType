# .github/workflows/ci-pack.yml

# Builds (via the shared setup-project composite) and packs NuGet packages,
# uploads *.nupkg artifacts, and writes a Summary section.

name: Package CI

on:
  workflow_call:

jobs:
  pack:
    name: Pack NuGet
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      checks: write

    env:
      ### Directories
      PACKAGE_RELEASE: artifacts/package/release

    steps:
      - name: ‚öôÔ∏è Checkout
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: üîß Setup project
        uses: ./.github/actions/setup-project

      # Pack all projects that define pack targets in the repo.
      - name: üì¶ Pack Packages
        run: |
          set -o errexit -o nounset -o pipefail

          echo "::group::dotnet pack -> $PACKAGE_RELEASE"
          {
            dotnet pack \
              -c Release \
              --no-build \
              --include-symbols \
              --include-source
          }
          echo '::endgroup::'
          #######################################################

      # Upload packaged artifacts for downstream consumption.
      - name: üì§ Upload Packages Artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: packages-${{ github.sha }}
          path: ${{ env.PACKAGE_RELEASE }}/**
          if-no-files-found: error
          retention-days: 30

      # Human-friendly list of produced packages in the job summary.
      - name: üìä Summary - Packages
        if: ${{ always() }}
        run: |
          set -o errexit -o nounset -o pipefail

          {
            echo '## üì¶ Packaged Artifacts'
            shopt -s nullglob

            # Collect .nupkg into an array and sort by filename:
            files=("${PACKAGE_RELEASE}"/*.nupkg)
            if [ ${#files[@]} -eq 0 ]; then
              echo '‚ö†Ô∏è No packages were created'
            else
              # Keep only file names and sort:
              IFS=$'\n' read -r -d '' -a sorted < <(printf '%s\n' "${files[@]##*/}" | sort && printf '\0')

              # Numbered list:
              i=1
              for name in "${sorted[@]}"; do
                echo "${i}. \`${name}\`"
                i=$((i+1))
              done
            fi
          } >> "$GITHUB_STEP_SUMMARY"
          #######################################################