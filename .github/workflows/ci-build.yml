# .github/workflows/ci-build.yml

name: Build, Test & Pack CI

on:
  workflow_call:

  workflow_dispatch:

jobs:
  build:
    name: Build Project
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      checks: write # to create annotations on PRs
    env:
      # Directories
      DOTNET_TOOLS: ~/.dotnet/tools
      TEST_RESULTS: test-results
      COVERAGE_REPORT: coverage-report
      PACKAGE_RELEASE: artifacts/package/release

      # Performance / Noise
      DOTNET_NOLOGO: true
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      # Disables "reuse" of MSBuild nodes (worker processes).
      # Equivalent to the msbuild /nr:false flag - after build, auxiliary processes are not left hanging:
      MSBUILDDISABLENODEREUSE: ${{ vars.MSBUILDDISABLENODEREUSE || '1' }}
      # Disables extract XML documentation files from NuGet packages when restoring (they are just skipped).
      # Useful for CIs where you don't need IntelliSense on dependencies:
      NUGET_XMLDOC_MODE: ${{ vars.NUGET_XMLDOC_MODE || 'skip' }}

    steps:
      ### Setup
      - name: ‚öô Checkout
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: ‚öô Setup .NET
        uses: actions/setup-dotnet@v5.0.0
        with:
          dotnet-version: |
            9.0.x
            8.0.x
            7.0.x
            6.0.x
          cache: true
          cache-dependency-path: '**/packages.lock.json'

      - name: üöß Display .NET Version
        run: dotnet --info

      - name: üß∞ Cache .NET Tools
        uses: actions/cache@v4.3.0
        with:
          path: ${{ env.DOTNET_TOOLS }}
          key: ${{ runner.os }}-dotnet-tools-${{ hashFiles('**/dotnet-tools.json') }}
          restore-keys: |
            ${{ runner.os }}-dotnet-tools-

      - name: ü™õ Install .NET Tools
        run: dotnet tool restore

      - name: üß© Restore Dependencies
        run: dotnet restore --locked-mode

      - name: ‚ÑπÔ∏è Get Version Information
        id: gitversion
        run: |
          {
            echo 'json<<EOF'
            dotnet gitversion /output json
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"
          #######################################################

      - name: üìä Generate Build Summary
        if: ${{ always() }}
        run: |
          echo "## üìä Build Information" >> $env:GITHUB_STEP_SUMMARY
          $gv = '${{ steps.gitversion.outputs.json }}' | ConvertFrom-Json
          echo "| Property | Value |" >> $env:GITHUB_STEP_SUMMARY
          echo "|---|---|" >> $env:GITHUB_STEP_SUMMARY
          echo ("| Version | **{0}** |" -f $gv.SemVer) >> $env:GITHUB_STEP_SUMMARY
          echo ("| Branch | `{0}` |" -f $gv.BranchName) >> $env:GITHUB_STEP_SUMMARY
          echo ("| Commit | `{0}` |" -f $gv.Sha.Substring(0,7)) >> $env:GITHUB_STEP_SUMMARY
        shell: pwsh


      ### Building
      - name: üõ†Ô∏è Build
        run: >-
          dotnet build
          -c Release
          --no-restore

      - name: üîß Rebuild project if failed
        # This step should not be run,
        # it's here in case there are any problems with restoring nuget packages from the cache,
        # and also to get a more detailed build log to see what the problem was:
        if: ${{ failure() }}
        run: |
          if (Test-Path ./scripts/clean.ps1) {
            Write-Host "::group::Cleaning"
            ./scripts/clean.ps1
            Write-Host "::endgroup::"
          }
          dotnet build -c Release --verbosity detailed
        shell: pwsh


      ### Testing
      - name: üîß Install ReportGenerator
        run: >-
          dotnet tool update -g dotnet-reportgenerator-globaltool
          || dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: üß™ Test + Coverage (Cobertura via XPlat)
        run: >-
          dotnet test -c Release --no-build -v minimal
          --results-directory "./${TEST_RESULTS}"
          --collect:"XPlat Code Coverage;Format=cobertura"
          --logger GitHubActions
          --
          RunConfiguration.CollectSourceInformation=true
          

      - name: ü§ù Merge Coverage Reports
        if: ${{ always() }}
        run: |
          reportgenerator \
            -reports:"${TEST_RESULTS}/**/coverage.cobertura.xml" \
            -targetdir:"${COVERAGE_REPORT}" \
            -reporttypes:"Cobertura;HtmlInline_AzurePipelines_Dark;MarkdownSummaryGithub;TextSummary"
          
          {
            echo '### üß™ Coverage artifacts'
            echo "* Cobertura: \`${COVERAGE_REPORT}/Cobertura.xml\`"
            echo "* HTML: \`${COVERAGE_REPORT}/index.html\`"
          } >> "$GITHUB_STEP_SUMMARY"
          #######################################################

      - name: üì§ Upload Coverage Artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ env.COVERAGE_REPORT }}-${{ github.sha }}
          path: ${{ env.COVERAGE_REPORT }}/**
          retention-days: 14

      - name: üìä Append Coverage to Summary
        if: ${{ always() }}
        run: |
          md="${COVERAGE_REPORT}/SummaryGithub.md"
          txt="${COVERAGE_REPORT}/Summary.txt"
          
          {
            echo
            if [ -f "$md" ]; then
              sed -E \
                -e 's/^# Summary$/## üìù Code Coverage/' \
                -e 's/^## Coverage/### Coverage details/' \
                "$md"
            else
              {
                echo '### üìù Code Coverage'
                echo '‚ö†Ô∏è Coverage markdown summary not found'
              }
            fi
            
            if [ -f "$txt" ]; then
              {
                echo
                echo '#### Quick totals'
                grep -E '^(Line|Branch|Method) coverage' "$txt" | sed 's/^/> /'
              }
            fi
          } >> "$GITHUB_STEP_SUMMARY"
          #######################################################


      ### Packing
      - name: üì¶ Pack Packages
        run: >-
          dotnet pack
          -c Release
          --no-build
          --include-symbols
          --include-source

      - name: üì§ Upload Packages Artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: packages-${{ github.sha }}
          path: ${{ env.PACKAGE_RELEASE }}/*
          if-no-files-found: error
          retention-days: 90

      - name: üìä Add Packaged Artifacts to Summary
        if: ${{ always() }}
        run: |
          {
            echo '### üì¶ Packaged Artifacts'
            packages="$(ls -1 "${PACKAGE_RELEASE}"/*.nupkg 2>/dev/null | sed 's/^/- `/' | sed 's/$/`/')"
            if [ -z "$packages" ]; then
              echo '‚ö†Ô∏è No packages were created'
            else
              echo "$packages"
            fi
          } >> "$GITHUB_STEP_SUMMARY"
          #######################################################