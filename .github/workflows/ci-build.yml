# .github/workflows/ci-build.yml

name: Build, Test & Pack CI

on:
  workflow_call:

  workflow_dispatch:

jobs:
  build:
    name: Build Project
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      checks: write  # for the test reporter to create annotations on PRs

    env:
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

    steps:
      - name: 🚧 Print current branch
        if: ${{ runner.debug == '1' }}
        run: echo '${{ github.ref_name }}'

      - name: ⚙ Checkout
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: ⚙ Setup Environment
        run: echo "DOTNET_TOOLS=${HOME}/.dotnet/tools" >> $GITHUB_ENV

      - name: ⚙ Setup .NET
        uses: actions/setup-dotnet@v5.0.0
        with:
          dotnet-version: |
            9.0.x
            8.0.x
            7.0.x
            6.0.x
          cache: true
          cache-dependency-path: '**/packages.lock.json'

      - name: 🚧 Display .NET Version
        run: dotnet --info

      - name: 🧰 Cache .NET Tools
        uses: actions/cache@v4.3.0
        with:
          path: ${{ env.DOTNET_TOOLS }}
          key: ${{ runner.os }}-dotnet-tools-${{ hashFiles('**/dotnet-tools.json') }}
          restore-keys: |
            ${{ runner.os }}-dotnet-tools-

      - name: 🪛 Install .NET Tools
        run: dotnet tool restore

      - name: 🧩 Restore Dependencies
        run: dotnet restore --locked-mode

      - name: ℹ️ Get Version Information
        id: gitversion # give the step an ID to reference its output
        run: |
          echo 'json<<EOF' >> $GITHUB_OUTPUT
          dotnet gitversion /output json >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: 🛠️ Build
        run: dotnet build -c Release --no-restore

      - name: 🔧 Rebuild project if failed
        if: ${{ failure() }}
        run: |
          chmod +x scripts/clean.sh || true
          ./scripts/clean.sh || true
          dotnet build -c Release -v detailed

      - name: 🔧 Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: 🧪 Run Tests & Generate Individual Coverage Reports
        id: run_tests
        continue-on-error: true
        run: |
          dotnet test -c Release --no-build -v minimal \
          '/p:CollectCoverage=true' \
          '/p:CoverletOutputFormat="json,lcov,cobertura"' \
          '/p:MergeWith=${{github.workspace}}/coverage.json' \
          '/p:CoverletOutput=${{github.workspace}}/coverage' \
          -- RunConfiguration.CollectSourceInformation=true

      - name: 🤝 Merge Coverage Reports
        if: always()
        run: |
          reportgenerator \
            "-reports:coverage.*.cobertura.xml" \
            "-targetdir:coverage-report" \
            "-reporttypes:Html_Dark;Cobertura"

      - name: 📦 Pack Packages
        run: |
          dotnet pack \
            -c Release \
            --no-build \
            --include-symbols \
            --include-source

      - name: 📦 Add Packaged Artifacts to Summary
        if: always()
        run: |
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '### 📦 Packaged Artifacts' >> $GITHUB_STEP_SUMMARY
          PACKAGES=$(ls -1 artifacts/package/release/*.nupkg 2>/dev/null | sed 's/^/- `/' | sed 's/$/`/')
          if [ -z "$PACKAGES" ]; then
            echo 'No packages were created' >> $GITHUB_STEP_SUMMARY
          else
            echo "$PACKAGES" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📤 Upload Packages Artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: packages-${{ github.sha }}
          path: artifacts/package/release/*
          if-no-files-found: error
          retention-days: 90

      - name: 📤 Upload Coverage Artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: coverage-report-${{ github.sha }}
          path: ${{ github.workspace }}/coverage-report/*
          retention-days: 1