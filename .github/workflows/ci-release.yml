# .github/workflows/ci-release.yml

# Publishes artifacts for version tags (v*.*.*):
# - Verifies the actor is the repository owner and validates the tag via a local action.
# - Pushes *.nupkg to NuGet (skip-duplicate) using NUGET_API_KEY.
# - Creates a GitHub Release and uploads packaged artifacts; summarizes outcomes.
# Fails fast on missing permissions/assets; logs are grouped and summarized for auditability.

name: Release Packages CI

on:
  workflow_call:
    inputs:
      dry-run:
        description: >-
          'If true, do NOT publish to NuGet or create a GitHub Release;'
          'only validate and print a plan'
        required: false
        type: boolean
        default: false
      version:
        description: >-
          'Override version (e.g., v1.2.3) - useful in dry-run on PRs without a tag'
        required: true
        type: string
    secrets:
      NUGET_API_KEY:
        required: true

env:
  ### Directories
  RELEASE_DIR: release
  ### Error Codes
  ERR_PUBLISH_NOT_ALLOWED: 21 # actor != repo owner
  ERR_NO_PACKAGES: 31         # no *.nupkg found to publish

jobs:
  verify-tag:
    name: Verify Before Publish
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read

    outputs:
      version: ${{ steps.check-tag-version.outputs.version }}
      is-prerelease: ${{ steps.check-tag-version.outputs.is-prerelease }}
      is-latest: ${{ steps.check-tag-version.outputs.is-latest }}
      is-publishable: ${{ steps.check-tag-version.outputs.is-publishable }}

    steps:
      - name: 🛡️ Check Permissions
        run: |
          set -o errexit -o nounset -o pipefail

          echo '::group::Context'
          echo "GitHub Actor: '${{ github.actor }}'"
          echo "Repository Owner: '${{ github.repository_owner }}'"
          echo "Ref: '${{ github.ref }}'"
          echo '::endgroup::'

          echo '::group::Permission check'
          if [[ '${{ github.actor }}' != '${{ github.repository_owner }}' ]]; then
            echo '::error title=Publishing not allowed::Only the repository owner can publish'
            echo '::endgroup::'
            exit "$ERR_PUBLISH_NOT_ALLOWED"
          fi
          echo '::notice title=Permission OK::Actor ${{ github.actor }} can publish'
          echo '🛡️ Publisher permissions confirmed. Actor ${{ github.actor }} can publish' >> "$GITHUB_STEP_SUMMARY"
          echo '::endgroup::'
          #######################################################

      - name: ⚙ Checkout (for tag inspection)
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: 🏷️ Check Tag Version
        id: check-tag-version
        uses: ./.github/actions/check-tag-action
        timeout-minutes: 5
        with:
          version: ${{ inputs.version }}
          allowed-prerelease-suffix-regex: '^(alpha|beta|rc)$'

      - name: 🧾 Append Tag Verdict to Summary
        if: ${{ always() }}
        run: |
          {
            echo '## 🏷️ Tag Verification'
            echo '| Field | Value |'
            echo '|---|---|'
            echo '| Version | **${{ steps.check-tag-version.outputs.version }}** |'
            echo '| Is prerelease | `${{ steps.check-tag-version.outputs.is-prerelease }}` |'
            echo '| Is publishable | `${{ steps.check-tag-version.outputs.is-publishable }}` |'
            echo '| Is latest | `${{ steps.check-tag-version.outputs.is-latest }}` |'
          } >> "$GITHUB_STEP_SUMMARY"
          #######################################################

  push-nuget:
    name: Push To NuGet
    needs: verify-tag
    if: >-
      ${{ inputs.dry-run != 'true'
      && needs.verify-tag.outputs.is-publishable == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions: { } # no GitHub API calls here
    env:
      ### Directories
      RELEASE_VERSION: ${{ needs.verify-tag.outputs.version }}
      ### Performance / Less Noise
      DOTNET_NOLOGO: true
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1

    steps:
      - name: 📥 Download Packages
        uses: actions/download-artifact@v5.0.0
        with:
          name: packages-${{ github.sha }}
          path: ${{ env.RELEASE_DIR }}

      - name: 🔎 List Downloaded Files
        run: |
          echo '::group::Downloaded artifacts'
          ls -la "$RELEASE_DIR" || true
          echo '::endgroup::'

      - name: ⚙ Setup .NET (CLI only)
        # Just to get the "dotnet nuget" command available,
        # building projects and packaging has already been done previously.
        uses: actions/setup-dotnet@v5.0.0
        with:
          dotnet-version: 9.0.x

      - name: 📣 Publish to NuGet
        run: |
          set -o errexit -o nounset -o pipefail
          shopt -s nullglob

          pkgs=("${RELEASE_DIR}"/*.nupkg)
          if [ ${#pkgs[@]} -eq 0 ]; then
            echo "::error title=No packages to publish::.nupkg files not found in '$RELEASE_DIR'"
            exit "$ERR_NO_PACKAGES"
          fi

          echo '::group::dotnet nuget push'
          {
            dotnet nuget push "${RELEASE_DIR}/*" \
              --api-key '${{ secrets.NUGET_API_KEY }}' \
              --source '${{ vars.NUGET_SOURCE || 'https://api.nuget.org/v3/index.json' }}' \
              --skip-duplicate
          }
          echo '::endgroup::'

          pushed_count="${#pkgs[@]}"
          {
            echo '## 📣 NuGet: Packages'
            echo
            echo '| Metric | Value |'
            echo '|---|---|'
            echo "| Version | **${RELEASE_VERSION}** |"
            echo "| Pushed/Skipped (duplicates) | **${pushed_count}** |"
          } >> "$GITHUB_STEP_SUMMARY"
          #######################################################

  create-release:
    name: Create GitHub Release
    needs: verify-tag
    if: >- 
        ${{ inputs.dry-run != 'true'
        && needs.verify-tag.outputs.is-publishable == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write # to create a Release and upload assets
    env:
      ### Directories
      RELEASE_VERSION: ${{ needs.verify-tag.outputs.version }}

    steps:
      - name: 📥 Download Packages
        uses: actions/download-artifact@v5.0.0
        with:
          name: packages-${{ github.sha }}
          path: ${{ env.RELEASE_DIR }}

      - name: 🔎 List Release Assets
        run: |
          echo '::group::Assets to attach'
          ls -la "$RELEASE_DIR" || true
          echo '::endgroup::'

      - name: 📯 Create GitHub Release
        id: create-release
        uses: softprops/action-gh-release@v2.4.1
        with:
          name: 'Release ${{ env.RELEASE_VERSION }}'
          generate_release_notes: true
          files: ${{ env.RELEASE_DIR }}/*
          prerelease: ${{ needs.verify-tag.outputs.is-prerelease == 'true' }}
          make_latest: ${{ needs.verify-tag.outputs.is-latest == 'true' }}
          fail_on_unmatched_files: true

      - name: 🖨️ Report Release
        run: |
          set -o errexit -o nounset -o pipefail

          url='${{ steps.create-release.outputs.url }}'
          id='${{ steps.create-release.outputs.id }}'
          is_latest='${{ needs.verify-tag.outputs.is-latest }}'
          is_prerelease='${{ needs.verify-tag.outputs.is-prerelease }}'
          assets_count="$(ls -1 "${RELEASE_DIR}"/* 2>/dev/null | wc -l | xargs || echo 0)"

          {
            echo '## 📰 GitHub Release'
            echo
            echo '| Property | Value |'
            echo '|---|---|'
            echo "| Version | **${RELEASE_VERSION}** |"
            echo "| _ID_ | \`${id}\` |"
            echo "| URL | $url |"
            echo "| Is latest | \`${is_latest}\` |"
            echo "| Is prerelease | \`${is_prerelease}\` |"
            echo "| Assets | $assets_count files |"
          } >> "$GITHUB_STEP_SUMMARY"
          #######################################################