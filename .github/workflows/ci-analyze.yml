# .github/workflows/ci-analyze.yml

# Standalone/reusable code analysis workflow:
# - Optional CodeQL (disabled by default; enable via repo var ENABLE_CODEQL_ANALYSIS=true).
# - Optional .NET analyzes (outdated/vulnerable packages + dotnet format analyzers) gated by ENABLE_DOTNET_ANALYSIS.
# Doesn't break the whole workflow, but publishes errors and warnings.
# - Produces human-readable GitHub Summary and uploads analyzer artifacts.
# Scheduled weekly and callable from other workflows. No secrets required.


name: Analyze CI

on:
  workflow_call:

  workflow_dispatch:

  # Weekly schedule: every Wed 19:00 UTC:
  schedule:
    - cron: '0 19 * * 3'

# Concurrency for manual/scheduled runs:
# - Do NOT cancel an in-flight run; allow multiple on-demand analyses to coexist.
# - When this workflow is "called" by another workflow, caller's concurrency applies.
concurrency:
  group: ${{ github.workflow }}-${{ github.run_id }}
  cancel-in-progress: false

jobs:
  codeql:
    name: CodeQL
    # This job provides an advanced, custom CodeQL configuration.
    # It's disabled by default because this repository uses GitHub's "Default Setup" for CodeQL.
    # Running both will cause an upload error; to enable this:
    #   1. Disable "Default Setup" in repository settings.
    #   2. Set the `ENABLE_CODEQL_ANALYSIS` repository variable to `true`.
    if: ${{ vars.ENABLE_CODEQL_ANALYSIS == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      security-events: write  # required for uploading SARIF to Security tab

    steps:
      - name: ⚙ Checkout
        uses: actions/checkout@v5.0.0
        with:
          # fetch-depth: 0 helps tools that need history:
          fetch-depth: 0

      - name: ⚙ Checkout PR merge head
        # In PRs, ensure we analyze the actual merge result (like default codeql setup does):
        if: ${{ github.event_name == 'pull_request' }}
        run: git checkout HEAD^2

      - name: 🫙 Initialize CodeQL
        uses: github/codeql-action/init@v4.31.0
        with:
          languages: csharp
          # We skip autobuild for speed; works for standard .NET repos:
          build-mode: none

      - name: 🩻 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v4.31.0


  dotnet-analyzes:
    name: .NET Analyzes
    if: ${{ vars.ENABLE_DOTNET_ANALYSIS == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
    env:
      ### Directories
      DOTNET_ANALYZES: dotnet-analyzes

    steps:
      - name: ⚙️ Checkout
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      # Shared setup without build:
      # - configures .NET env, PATH and problem matcher;
      # - installs SDKs, restores tools and solution.
      - name: 🔧 Setup project
        uses: ./.github/actions/setup-project
        with:
          run-build: 'false'

      - name: ⚙ Create Analyzes Directory
        shell: sh
        run: mkdir -p "$DOTNET_ANALYZES"

      - name: 📦 Detect Outdated NuGet Packages
        # Runs `dotnet list package --outdated` and summarizes.
        # Heuristic for "something outdated": lines that begin with "> " in the report tables.
        # Does not fail the job; emits ::warning when any outdated package detected.
        run: |
          set -o errexit -o nounset -o pipefail

          outdated_report_file='outdated-report.txt'

          echo '::group::List packages (outdated)'
          {
            dotnet list package \
              --outdated
          } | tee "${DOTNET_ANALYZES}/${outdated_report_file}"
          echo '::endgroup::'

          outdated_count="$(grep -Ec '^\s*>\s' "${DOTNET_ANALYZES}/${outdated_report_file}" || true)"
          if [[ "$outdated_count" != '0' ]]; then
            echo "::warning title=NuGet outdated::Found $outdated_count outdated package rows." \
                 'See summary and artifact'
          else
            echo '::notice title=NuGet outdated::No outdated packages detected'
          fi

          {
            echo '## 📦 NuGet: Outdated packages'
            echo
            echo "_Detected rows_: **${outdated_count}**"
            echo
            echo '```text'
            cat "${DOTNET_ANALYZES}/${outdated_report_file}"
            echo
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"
        continue-on-error: true

      - name: 🛡️ Detect Vulnerable NuGet Packages
        # Runs `dotnet list package --vulnerable --include-transitive`.
        # Emits ::error if any vulnerability is found (but step is continue-on-error to not stop the workflow).
        run: |
          set -o errexit -o nounset -o pipefail

          vulnerable_report_file='vulnerable-report.txt'

          echo '::group::List packages (vulnerable)'
          {
            dotnet list package \
              --vulnerable \
              --include-transitive
          } | tee "${DOTNET_ANALYZES}/${vulnerable_report_file}"
          echo '::endgroup::'

          # Several markers that appear in vulnerability reports:
          vulnerable_count="$(grep -Eic '^\s*>\s|Severity|CVE-' "${DOTNET_ANALYZES}/${vulnerable_report_file}" || true)"
          if [[ "$vulnerable_count" != '0' ]]; then
            echo '::error title=NuGet vulnerabilities::Potentially vulnerable packages detected' \
                 "(markers matched: ${vulnerable_count})." \
                 'See summary and artifact'
          else
            echo '::notice title=NuGet vulnerabilities::No vulnerable packages detected'
          fi

          {
            echo '## 🛡️ NuGet: Vulnerable packages'
            echo
            echo "_Markers matched (heuristic)_: **${vulnerable_count}**"
            echo
            echo '```text'
            cat "${DOTNET_ANALYZES}/${vulnerable_report_file}"
            echo
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"
        continue-on-error: true

      - name: 🩻 Detect .NET Analyzer/Format Issues
        # Runs `dotnet format analyzers` and produces a JSON report in $DOTNET_ANALYZES/format-report.json.
        # We don't fail the job here; it is an advisory signal.
        run: |
          set -o errexit -o nounset -o pipefail

          format_report_log_file='format-report.log'

          echo '::group::dotnet format analyzers'
          {
            dotnet format analyzers \
              --severity info \
              --verify-no-changes \
              --include src \
              --verbosity diagnostic \
              --report "$DOTNET_ANALYZES"
          } | tee "${DOTNET_ANALYZES}/${format_report_log_file}"
          echo '::endgroup::'

          echo '::group::dotnet-format tail'
          tail -n 20 "${DOTNET_ANALYZES}/${format_report_log_file}" || true
          echo '::endgroup::'

          # Try standard JSON report file; fallback to any *.json in folder if tool version changes naming:
          format_report_file="${DOTNET_ANALYZES}/format-report.json"
          if [ ! -f "$format_report_file" ]; then
            alt_json="$(ls -1 "$DOTNET_ANALYZES"/*.json 2>/dev/null | head -n 1 || true)"
            if [ -n "$alt_json" ]; then
              format_report_file="$alt_json"
              echo "::notice title=dotnet-format::Using alternate JSON report: $format_report_file"
            fi
          fi

          echo '## 🧾 .NET Format Report' >> "$GITHUB_STEP_SUMMARY"
          if [ -f "$format_report_file" ]; then
            report_json="$(cat "$format_report_file" || echo '[]')"
            if [[ "$report_json" == '[]' ]]; then
              echo '::notice title=dotnet-format::No analyzer/format issues found'
              echo '✅ No analyzer/format issues found' >> "$GITHUB_STEP_SUMMARY"
            else
              echo '::warning title=dotnet-format::Analyzer/format issues found.' \
                   'See summary and artifacts'
              {
                echo
                echo '```json'
                echo "$report_json"
                echo
                echo '```'
              } >> "$GITHUB_STEP_SUMMARY"
            fi
          else
            echo "::warning title=dotnet-format::JSON report not found in $DOTNET_ANALYZES"
            echo '⚠️ No JSON report found' >> "$GITHUB_STEP_SUMMARY"
          fi
        continue-on-error: true

      - name: 📤 Upload Analyzer Reports
        # Always upload to help debugging locally vs CI differences.
        if: ${{ always() }}
        uses: actions/upload-artifact@v5.0.0
        with:
          name: ${{ env.DOTNET_ANALYZES }}-${{ github.sha }}
          path: ${{ env.DOTNET_ANALYZES }}/*
          if-no-files-found: warn