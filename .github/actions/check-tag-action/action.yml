# .github/actions/check-tag-action/action.yml
name: Check Tag Action
description: >-
  Validates the tag version format and checks version ordering.
  Outputs:
    - version: the validated version (same as input);
    - is_prerelease: 'true' if the version includes a prerelease part:
    - is_publishable: 'true' if the version format is correct and (if prerelease) allowed for publication;
    - is_latest: 'true' if the version is the highest among existing version tags.

inputs:
  version:
    description: 'Version from the tag (e.g. v1.0.0 or v1.0.0-alpha)'
    required: true
  version_regex:
    description: 'Regular expression to check the version format and filter existing tags'
    required: false
    default: '^v[0-9]+\.[0-9]+\.[0-9]+(-([0-9A-Za-z]+))?$'
  allowed_prerelease_suffix_regex:
    description: 'Regular expression for acceptable prerelease values'
    required: true

outputs:
  version:
    description: 'The validated version'
    value: ${{ steps.validate_tag_format.outputs.version }}
  is_prerelease:
    description: 'True if the version is a prerelease'
    value: ${{ steps.validate_tag_format.outputs.is_prerelease }}
  is_publishable:
    description: 'True if the version is publishable'
    value: ${{ steps.validate_tag_format.outputs.is_publishable }}
  is_latest:
    description: 'True if the version is the highest (latest) among existing tags'
    value: ${{ steps.check_tag_ordering.outputs.is_latest }}

runs:
  using: composite

  steps:
    - name: Validate Version Tag Format
      id: validate_tag_format
      run: |
        # Receive input data:
        version="${{ inputs.version }}"
        version_regex="${{ inputs.version_regex }}"
        allowed_prerelease_suffix_regex="${{ inputs.allowed_prerelease_suffix_regex }}"

        echo "Detected version: '$version'"
        echo "Using version regex: '$version_regex'"
        echo "Using allowed prerelease regex: '$allowed_prerelease_suffix_regex'"

        # Initialize flags:
        is_publishable=false
        is_prerelease=false

        if [[ $version =~ $version_regex ]]; then
            # If there is no pre-release group - the version is not pre-release, it is published:
            if [ -z "${BASH_REMATCH[2]}" ]; then
                echo 'No prerelease part detected. Setting is_publishable=true'
                is_publishable=true
            else
                is_prerelease=true
                prerelease="${BASH_REMATCH[2]}"
                echo "Detected prerelease part: '$prerelease'"
        
                if [[ "$prerelease" =~ $allowed_prerelease_suffix_regex ]]; then
                    echo "Prerelease '$prerelease' is allowed. Setting is_publishable=true"
                    is_publishable=true
                else
                    echo "Warn: Prerelease '$prerelease' is NOT allowed. Setting is_publishable=false" >&2
                    is_publishable=false
                fi
            fi
        else
            echo "Error: Incorrect version format: '$version'" >&2
            exit 101
        fi

        # Save the results to the output of the step:
        {
          echo "is_publishable=$is_publishable"
          echo "is_prerelease=$is_prerelease"
          echo "version=$version"
        } >> "$GITHUB_OUTPUT"
        #######################################################
      shell: bash

    - name: Validate Correct Version Order
      id: check_tag_ordering
      run: |
        # Receive input data:
        version="${{ inputs.version }}"
        version_regex="${{ inputs.version_regex }}"

        # Get full tag history (if there is a shallow clone left)
        git fetch --tags --prune-tags --unshallow || true
        
        echo "New version: '$version'"
        echo "Using version regex: '$version_regex'"
        
        # Initialize flags:
        is_latest=false
        
        # Get the list of existing tags matching the template, excluding the new tag:
        existing_tags=$(git tag --list | grep -E "$version_regex" | grep -v "^$version$" || true)
        
        if [ -z "$existing_tags" ]; then
          echo 'Warn: No existing version tags found, skipping version ordering check' >&2
          # If no other tags are present, the new version is considered the latest:
          is_latest=true
        else
          # Determine the highest version among the existing tags:
          highest_existing=$(echo "$existing_tags" | sort -V | tail -n 1)
          echo "Highest existing version: '$highest_existing'"
        
          # Determine which of the two versions (the highest existing and the new) is newer:
          new_highest=$( (echo "$highest_existing"; echo "$version") | sort -V | tail -n 1)
          if [ "$new_highest" == "$version" ]; then
            is_latest=true
          else
            is_latest=false
            echo "Warn: New version $version is less than highest existing version $highest_existing" >&2
          fi
        fi
        
        # Save the results to the output of the step:
        echo "is_latest=$is_latest" >> "$GITHUB_OUTPUT" 
        #######################################################
      shell: bash